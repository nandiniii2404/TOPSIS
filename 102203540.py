# -*- coding: utf-8 -*-
"""102203540.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wtgpMo5duo-rfNn2cTA5tIz4QA3xDzWE
"""

import sys
import pandas as pd
import numpy as np

def validate_inputs(data, weights, impacts):
    """Validates the input data, weights, and impacts."""
    if len(weights) != len(impacts):
        raise ValueError("The number of weights must match the number of impacts.")

    if len(weights) != data.shape[1] - 1:
        raise ValueError("The number of weights and impacts must match the number of criteria columns in the input file.")

    if not all(impact in ['+', '-'] for impact in impacts):
        raise ValueError("Impacts must be either '+' or '-'.")

def topsis(input_file, weights, impacts, output_file):
    """Performs the TOPSIS analysis."""
    try:
        # Read the input file
        data = pd.read_csv(input_file)

        # Validate the input file structure
        if data.shape[1] < 3:
            raise ValueError("Input file must contain at least three columns.")

        if not all(data.iloc[:, 1:].applymap(np.isreal).all()):
            raise ValueError("All columns except the first must contain numeric values.")

        # Convert weights and impacts
        weights = list(map(float, weights.split(',')))
        impacts = impacts.split(',')

        validate_inputs(data, weights, impacts)

        # Normalize the decision matrix
        decision_matrix = data.iloc[:, 1:].values
        normalized_matrix = decision_matrix / np.sqrt((decision_matrix ** 2).sum(axis=0))

        # Apply weights
        weighted_matrix = normalized_matrix * weights

        # Determine ideal best and ideal worst
        ideal_best = np.max(weighted_matrix, axis=0) * np.array([1 if i == '+' else -1 for i in impacts])
        ideal_worst = np.min(weighted_matrix, axis=0) * np.array([1 if i == '+' else -1 for i in impacts])

        # Calculate distances from ideal best and worst
        distance_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))
        distance_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))

        # Calculate Topsis score
        scores = distance_worst / (distance_best + distance_worst)

        # Rank the alternatives
        data['Topsis Score'] = scores
        data['Rank'] = scores.argsort()[::-1] + 1

        # Save the results to the output file
        data.to_csv(output_file, index=False)
        print(f"Results successfully saved to {output_file}.")

    except FileNotFoundError:
        print("Error: Input file not found.")
    except ValueError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    # Check for correct number of command-line arguments
    if len(sys.argv) != 5:
        print("Usage: python <program.py> <InputDataFile> <Weights> <Impacts> <ResultFileName>")
    else:
        _, input_file, weights, impacts, output_file = sys.argv
        topsis(input_file, weights, impacts, output_file)